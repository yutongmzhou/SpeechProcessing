# -*- coding: utf-8 -*-
"""features.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1unvn0-FPMK-QsVSkZR6BGD35DdO6nJcT
"""

!pip install praat-parselmouth
!pip install -U -q PyDrive
!pip install opensmile
import parselmouth
from parselmouth.praat import call
from IPython.display import Audio
import pandas as pd
import math
import os

from google.colab import drive
drive.mount('/content/drive/')

file_path = # fill in with filepath
recordings_path = #fill in with speech recordings path

import opensmile

smile = opensmile.Smile(
    feature_set=opensmile.FeatureSet.ComParE_2016,
    feature_level=opensmile.FeatureLevel.Functionals,
)

files = []
filenames = []
for file in os.listdir(recordings_path):
  files.append(recordings_path + '/' + file)
  filenames.append(file)

features = smile.process_files(
    files,
)

df = pd.DataFrame(features)
df.insert(loc=0, column='filename', value=filenames)
df.to_csv(file_path + 'opensmile_features.csv', index=False)

#Pitch extraction
pitch_floor = 75.0
pitch_ceiling = 600.0
unit = 'hertz'

#Intensity specific. Also use energy averaging method for mean
intensity_pitch_floor = 100.0

#MISC
min_time = 0
max_time = 0
interpolation_method = "Parabolic"

pitch_arrays = DefaultDict(list)
raw_pitch_arrays = []
emotion_categorized_pitch_arrays = DefaultDict(list)

intensity_arrays = DefaultDict(list)
raw_intensity_arrays = []
emotion_categorized_intensity_arrays = DefaultDict(list)

def analyze_wav(filename, min_time, recordings_path):

    split_filename = filename.split('_')

    speaker = split_filename[0]

    max_time = 0

    sound = parselmouth.Sound(recordings_path + '/' + filename)
    left_channel = sound.extract_left_channel()

    pitch = call(left_channel, "To Pitch (ac)", 0.0, 75, 15, False, 0.03, 0.45, 0.01, 0.35, 0.14, 600)

    pitch_array = pitch.selected_array["frequency"]

    pitch_arrays[speaker].extend(pitch_array)
    raw_pitch_arrays.append(pitch_array)

    pitch_minimum = call(pitch, "Get minimum", min_time, max_time, unit, interpolation_method)

    pitch_maximum = call(pitch, "Get maximum", min_time, max_time, unit, interpolation_method)

    pitch_mean = call(pitch, "Get mean", min_time, max_time, unit)

    intensity = call(left_channel, "To Intensity", 100.0, 0.0)

    intensity_array = intensity.as_array()

    intensity_arrays[speaker].extend(intensity_array)
    raw_intensity_arrays.append(intensity_array)

    intensity_minimum = call(intensity, 'Get minimum', min_time, max_time, interpolation_method)

    intensity_maximum = call(intensity, 'Get maximum', min_time, max_time, interpolation_method)

    intensity_mean =  call(intensity, "Get mean", min_time, max_time, "energy")

    return [pitch_array, pitch_minimum, pitch_maximum, pitch_mean, intensity_minimum,
                        intensity_maximum, intensity_mean]

def print_to_csv(directory, output_name):

  features_csv = []
  feature_list = ['Pitch Array', 'Min Pitch', 'Max Pitch',	'Mean Pitch',	'Min Intensity',	'Max Intensity',	'Mean Intensity']
  filenames = []
  speakers = []
  sessions = []
  start_times = []
  emotion_tags = []
  content = []
  count = 0

  for file in os.listdir(directory):
    print(file)
    split_filename = file.split('_')
    filenames.append(file)
    speakers.append(split_filename[0])
    sessions.append(split_filename[1])
    emotion_tags.append(split_filename[2])
    start_times.append(split_filename[3])
    content.append(split_filename[4])

    features = analyze_wav(file, float(split_filename[3]), directory)
    features_csv.append(features)

    df = pd.DataFrame(features_csv)
    df.columns = feature_list


  df.insert(loc=0, column='filename', value=filenames)
  df.insert(loc=1, column='speaker', value=speakers)
  df.insert(loc=2, column='session', value=sessions)
  df.insert(loc=3, column='emotion_tag', value=emotion_tags)
  df.insert(loc=4, column='start_time', value=start_times)
  df.insert(loc=5, column='content', value=content)

  df.to_csv(output_name, index=False)

#feature extraction. Takes very long

print_to_csv(recordings_path, file_path + 'features_train.csv')

from typing_extensions import DefaultDict
import csv
import numpy as np


def normalize_pitch(filepath):
  mean_std = {}

  for key, value in pitch_arrays.items():
    mean_std[key] = (np.mean(value), np.std(value))

  normalized_pitch_arrays = []
  normalized_min = []
  normalized_max = []
  normalized_mean = []

  with open(filepath, mode ='r') as file:
    csvFile = csv.DictReader(file)
    counter = 0
    for line in csvFile:
      pitch_array = raw_pitch_arrays[counter]
      mean = np.ones(len(pitch_array))*mean_std[line['speaker']][0]
      std = np.ones(len(pitch_array))*mean_std[line['speaker']][1]
      normalized_pitch_arrays.append((pitch_array - mean)/std)

      normalized_min.append(np.min(normalized_pitch_arrays[-1]))
      normalized_max.append(np.max(normalized_pitch_arrays[-1]))
      normalized_mean.append(np.mean(normalized_pitch_arrays[-1]))
      counter += 1

  df = pd.read_csv(filepath)
  df.insert(loc=13, column='Normalized Pitch Arrays', value=normalized_pitch_arrays)
  df.insert(loc=14, column='Normalized Min Pitch', value=normalized_min)
  df.insert(loc=15, column='Normalized Max Pitch', value=normalized_max)
  df.insert(loc=16, column='Normalized Mean Pitch', value=normalized_mean)

  df.to_csv(filepath, index=False)


def normalize_intensity(filepath):
  mean_std = {}

  for key, value in intensity_arrays.items():
    mean_std[key] = (np.mean(value), np.std(value))

  normalized_intensity_arrays = []
  normalized_min = []
  normalized_max = []
  normalized_mean = []

  with open(filepath, mode ='r') as file:
    csvFile = csv.DictReader(file)
    counter = 0
    for line in csvFile:
      pitch_array = raw_pitch_arrays[counter]
      mean = np.ones(len(pitch_array))*mean_std[line['speaker']][0]
      std = np.ones(len(pitch_array))*mean_std[line['speaker']][1]
      normalized_intensity_arrays.append((pitch_array - mean)/std)

      normalized_min.append(np.min(normalized_intensity_arrays[-1]))
      normalized_max.append(np.max(normalized_intensity_arrays[-1]))
      normalized_mean.append(np.mean(normalized_intensity_arrays[-1]))
      counter += 1

  df = pd.read_csv(filepath)
  df.insert(loc=17, column='Normalized Intensity Arrays', value=normalized_intensity_arrays)
  df.insert(loc=18, column='Normalized Min Intensity', value=normalized_min)
  df.insert(loc=19, column='Normalized Max Intensity', value=normalized_max)
  df.insert(loc=20, column='Normalized Mean Intensity', value=normalized_mean)

  df.to_csv(filepath, index=False)

normalize_pitch(file_path + 'features_train.csv')
normalize_intensity(file_path + 'features_train.csv')

def analyze_features(filename):
    from collections import defaultdict
    import numpy as np
    import matplotlib.pyplot as plt

    pitch_mean = []
    pitch_max = []
    pitch_min = []

    intensity_mean = []
    intensity_max = []
    intensity_min = []

    emotion_tags = []

    with open(filename, mode ='r') as file:
      csvFile = csv.DictReader(file)
      counter = 0
      for line in csvFile:


    plt.errorbar(emotion_tags, emotion_means, emotion_stds, fmt="o", color="r")

    plt.show()

analyze_features(file_path + 'features_train.csv')